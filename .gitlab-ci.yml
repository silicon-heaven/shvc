stages:
  - devenv
  - build
  - test
  - lint
  - style
  - coverage
  - release

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

variables:
  GIT_DEPTH: 0

.nix:
  image: registry.gitlab.com/cynerd/gitlab-ci-nix
  tags:
    - docker
  cache:
    key: "nix"
    paths:
      - ".nix-cache"
  before_script:
    - gitlab-ci-nix-cache-before
  after_script:
    - gitlab-ci-nix-cache-after

## Development environment #####################################################
devenv:
  stage: devenv
  extends: .nix
  script:
    - nix develop -c true

## Build stage #################################################################
.build:
  stage: build
  extends: .nix
  needs: ["devenv"]

build:
  extends: .build
  script:
    - nix develop --quiet -c meson setup build -Doptimization=plain $SETUP_ARGS
    - nix develop --quiet -c meson compile -C build
  artifacts:
    when: always
    paths:
    - 'build/'

build-werror:
  extends: build
  needs:
    - job: build
      artifacts: false
  allow_failure: true
  variables:
    SETUP_ARGS: --werror

nix:
  extends: .build
  script:
    - nix build --log-lines 10000 .?submodules=1

nix-appimage:
  extends: .build
  needs: ["nix"]
  script:
    - |
      nix eval --json --impure --apply 'v: builtins.attrNames v.${builtins.currentSystem}' .#apps \
        | nix run .#jq -- -r '.[]' \
        | while read -r app; do
          nix bundle \
            --bundler github:ralismark/nix-appimage/17dd6001ec228ea0b8505d6904fc5796d3de5012 \
            ".?submodules=1#$app";
          done
  artifacts:
    when: always
    paths:
    - '*.AppImage'

## Test stage ##################################################################
.test:
  stage: test
  extends: .nix
  needs: ["devenv"]

.test-meson:
  extends: .test
  needs:
    - job: build
      artifacts: false
  script:
    - ulimit -n 1024 # workaround for Valgrind
    - nix develop --quiet -c meson setup build -Doptimization=plain $SETUPARG
    - nix develop --quiet -c meson test -C build --print-errorlogs $TESTARG
  artifacts:
    when: always
    paths:
      - 'build/'

tests:
  extends: .test-meson
  variables:
    SETUPARG: -Db_coverage=true # Used in coverage job
  artifacts:
    reports:
      junit: 'build/meson-logs/testlog.junit.xml'

valgrind:memcheck:
  extends: .test-meson
  variables:
    TESTARG: --setup=memcheck

valgrind:helgrind:
  extends: .test-meson
  variables:
    TESTARG: --setup=helgrind

valgrind:drd:
  extends: .test-meson
  variables:
    TESTARG: --setup=drd

nix-check:
  extends: .test
  needs:
    - job: nix
      artifacts: false
  script:
    - nix flake check .?submodules=1

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

## Linters #####################################################################
.lint:
  stage: lint
  extends: .nix
  needs: ["devenv"]
  allow_failure: true

clang-tidy:
  extends: .lint
  needs: ["build"]
  script:
    - nix develop --quiet -c ninja -C build clang-tidy

ruff:
  extends: .lint
  script:
    - nix develop --quiet -c ruff check .

mypy:
  extends: .lint
  script:
    - mkdir .mypy-cache
    - nix develop --quiet -c mypy --cache-dir .mypy-cache --exclude 'docs' .

shellcheck:
  extends: .lint
  script:
    - git ls-files '**.sh' | xargs nix develop --quiet -c shellcheck

statix:
  extends: .lint
  script:
    - nix develop --quiet -c statix check .

## Style stage #################################################################
.style:
  stage: style
  extends: .nix
  needs: ["devenv"]
  allow_failure: true

muon:
  extends: .style
  script:
    - |
      git ls-files '**/meson.build' meson_options.txt |
        nix develop --quiet -c xargs muon fmt -e -i
    - git diff --exit-code

clang-format:
  extends: .style
  script:
    - nix develop --quiet -c meson setup build
    - nix develop --quiet -c ninja -C build clang-format
    - git diff --exit-code

ruff-format:
  extends: .style
  script:
    - nix develop --quiet -c ruff format --diff .
    - nix develop --quiet -c ruff check --diff .

shell-format:
  extends: .style
  script:
    - git ls-files '**.sh' '**.bats' | xargs nix develop --quiet -c shfmt -w
    - git diff --exit-code

nixfmt:
  extends: .style
  script:
    - nix fmt .
    - git diff --exit-code

deadnix:
  extends: .style
  script:
    - nix develop --quiet -c deadnix --fail .

editorconfig-checker:
  extends: .style
  script:
    - nix develop --quiet -c editorconfig-checker -exclude '.nix-cache/.*'

gitlint:
  extends: .style
  script:
    - git fetch
    - nix develop --quiet -c gitlint --commits origin/master..$CI_COMMIT_SHA

## Code Coverage stage #########################################################
coverage:
  stage: coverage
  extends: .nix
  needs:
    - job: tests
      artifacts: true
  script:
    - nix develop --quiet -c ninja -j1 -C build coverage-html coverage-xml
    - mv build/meson-logs/coveragereport ./
  coverage: '/lines\.\.\.\.\.\.: (\d+.\d+%)/'
  artifacts:
    expire_in: 1 month
    expose_as: 'Code Coverage'
    paths:
    - 'coveragereport/'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: 'build/meson-logs/coverage.xml'

## Release creation ############################################################
release:
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG'
  image: "registry.gitlab.com/gitlab-org/release-cli:latest"
  needs:
    - job: tests
      artifacts: false
    - job: nix-appimage
      artifacts: true
  before_script:
    - apk update
    - apk add bash curl yq
  script:
    - ./release.sh

pages:
  stage: release
  extends: .nix
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs: ["devenv"]
  script:
    - git fetch
    - nix develop --quiet -c sphinx-multiversion docs public
    - | # Add index.html to public root to redirect to $CI_DEFUALT_BRANCH/index.html
      cat >public/index.html << EOF
      <!DOCTYPE html>
        <html>
          <head>
            <title>Redirecting to $CI_DEFAULT_BRANCH branch</title>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="0; url=./$CI_DEFAULT_BRANCH/index.html">
            <link rel="canonical" href="$CI_PAGES_URL/$CI_DEFAULT_BRANCH/index.html">
          </head>
        </html>
      EOF
  artifacts:
    paths:
    - public
